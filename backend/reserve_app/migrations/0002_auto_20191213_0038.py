# Generated by Django 2.2.3 on 2019-12-13 00:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reserve_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DateTimeSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('isReserved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('location', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_id', models.CharField(max_length=11, unique=True)),
                ('mobile_phone', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('profile_pic', models.ImageField(blank=True, upload_to='profile_pics')),
                ('Telegram_link', models.URLField(blank=True, null=True, unique=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='reserve_app.Department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('capacity', models.IntegerField(default=0)),
                ('location', models.CharField(max_length=150, unique=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places', to='reserve_app.Department')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desciption', models.CharField(blank=True, max_length=150, null=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reserved_places', to='reserve_app.Member')),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations_on_this_datetimeslot', to='reserve_app.DateTimeSlot')),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('location', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.DeleteModel(
            name='Customer',
        ),
        migrations.AddField(
            model_name='department',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='reserve_app.University'),
        ),
        migrations.AddField(
            model_name='datetimeslot',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_datetimeslots', to='reserve_app.Place'),
        ),
        migrations.AlterUniqueTogether(
            name='datetimeslot',
            unique_together={('datetime', 'place')},
        ),
    ]
